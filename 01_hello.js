/*
    서버
    서버(servr)란 한국어로 '을 ' 정도로 번역할 수 있습니다. 서버와 대비되는 개념은 클라이언트(client)가
    있는데 클라이언트는 요청하고, 서버는 응답하는 관계입니다. 오늘날 인터넷과 연결된 거의 모든 소프트웨어들이
    클라이언트 - 서버 관계를 가지고 있습니다. 대표적인 것이 웹인데요.
    웹은 (파이어폭스, 크롬, IE와 같은) 웹 브라우저와(Apache, IIS, Nginx와 같은) 웹서버로 이루어집니다.
    웹브라우저에 URL을 입력하면 그 URL에 해당하는 웹서버로 웹페이지에 대한 요청이 전달됩니다.
    (네이버, 다음, 구글, opentutorials.org와 같은) 웹서버는 웹브라우저가 요청한 정보를 제공하게 됩니다.

    어떤 기술을 분류한다는 것은 대단히 어려운 일입니다만 생활코딩에서는 아래와 같은 기술을 서버로 분류하고 있습니다.
    1. 미들웨어 : PHP, JAVA, PYTHON
    2. 데이터베이스 :  MYSQL, ORACLE, MONGODB
    3. 인프라 : 아마존 웹서비스, HADOOP
    4. 네트워크

    자바스크립트
    1990년 : 팀 버너스리에 의해 웹이 창시.
    1994년 : 마크 앤더슨에 의해 NETSCAPE -> 세계 최초 상업적 웹브라우저 -> 웹과 인터넷 동반성장.
    1995년 : 브랜든 아이크가 자바스크립트가 등장.

    자바스크립트가 탄생하면서 웹은 동적인 기술을 갖게됨.
    HTML위에서 자바스크립트가 사용자와 웹과의 상호작용을 할 수 있게 만듬.
    WEB이라는 울타리 안에 있는 기술(철창에 갇힌 것이 단점). -> 자바스크립트가 효용가치가 없었음.

    2004년 : 구글에 의해서 GMAIL서비스가 발표됨(순수한 웹애플리케이션) -> 자바스크립트로 구현
            GMAP -> 순수한 웹기술을 이용해 지도를 보여주는 웹 애플리 케이션.

            PURE WEB : 한번 개발하면 어디서든 동작, 웹브라우저만 동작되면 동작되는 환경. -> 자바스크립트를 배워야 겠다.

    2008년 : 구글이 자바스크립트로 크롬 엔진을 개발하면서 V8을 만듬. -> 엔진 자체를 오픈소스로 공개
            -> 자바스크립트는 웹에 국한되지 않게됨. -> 웹에서만 사용되지 않고 다른 분야에서도 사용하게 됨.

    2009년 : RYAN DAHL에 의해서 만들어진 Node.js
            구글이 만든 V8엔진 + event-driven(자바스크립트 방식) + non-blocking 10 = node.js
            서버쪽에서도 동작하는 자바스크립트

    Web Browser vs Nodejs
      : JavaScript
         1. language(언어) - Web Browser
         2. runtime(환경) - Nodejs

    JavaScript - Web Browser, Nodejs가 가지고 있는 특성을 알고 있어야함.(협력적인 관계)

    장점 : 웹과 서버에서 JavaScript를 사용해서 하나의 완결된 Application을 만들 수 있다. 
*/
console.log('Hello world');
console.log(1+10);
